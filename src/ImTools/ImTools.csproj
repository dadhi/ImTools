<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFrameworks Condition="'$(DevMode)' == 'true'">net45;netstandard2.0</TargetFrameworks>
        <TargetFrameworks Condition="'$(DevMode)' != 'true'">net35;net40;net45;netstandard1.0;netstandard1.3;netstandard2.0;portable-net45+win8+wpa81+wp8;portable-net40+win8+wpa81+wp8+sl5</TargetFrameworks>
        <TargetFrameworks Condition="'$(LocalBuild)' == 'true'">net40;net45;netstandard1.0;netstandard1.3;netstandard2.0</TargetFrameworks>

        <Product>ImTools</Product>
        <VersionPrefix>2.0.0</VersionPrefix>
        <VersionSuffix></VersionSuffix>

        <AssemblyName>$(Product)</AssemblyName>
        <AssemblyTitle>$(AssemblyName) $(TargetFramework)</AssemblyTitle>

        <PackageId>$(Product).dll</PackageId>
        <Title>$(Product).dll</Title>
        <Description>
<![CDATA[
        Immutable persistent collections, algebraic sum-type aka descriminated union, Ref type and supportive extensions for performant functional programming in C#.
        Split from the DryIoc: https://github.com/dadhi/DryIoc
]]>
        </Description>
        <PackageTags>FP Performance Simple Functional Immutable Persistent Map Avl Balanced Tree Dictionary Thread-safe Functional Atomic Ref Algebraic Discriminated Union SumType</PackageTags>
        <PackageReleaseNotes>
<![CDATA[
        ## v2.0.0 Major feature release

        ### Highlights

        - Faster and less allocative ImMap and ImHashMap with more methods (plus bucketed ImMapSlots and ImHashMapSlots variants)
        - Algebraic sum-type aka descriminated union and one-liner records - Union<TUnion, T1..N>, Box<TBox, T>, Item<TItem, T>
        - GrowingList<T>, ImZipper<T>, StackPool<T>, Unit, Fun extensions with forward pipe operators
        - Ref.Swap now accepts state to use closure-less lambdas with less allocations

        ### Details
            
        https://github.com/dadhi/ImTools/milestone/2
]]>
    </PackageReleaseNotes>
    </PropertyGroup>

</Project>
